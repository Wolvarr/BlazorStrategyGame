@page "/"
@using StrategyGameClient.DTOs.CreateGame;
@using System.Net.Http;
@using StrategyGame.Shared.Models.Lobby;
@using StrategyGame.Shared.Models.Events;
@using System.Threading


@inject HttpClient Http
@inject IJSRuntime JsRuntime;
@inject LobbyService lobbyService
@inject GameService gameService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService


<div class="row">
    <div class="create-lobby-container">
        <EditForm Model="createLobbyModel" OnValidSubmit="CreateLobby">
            <DataAnnotationsValidator />
            <ValidationMessage For="() => createLobbyModel.LobbyName" />
            <label for="lobbyName" class="authInputLabel">Lobby name</label>
            <InputText class="authInputField" @bind-Value="createLobbyModel.LobbyName" placeholder="lobbyName" name="lobbyName" id="lobbyName"></InputText>
            <ValidationMessage For="() => createLobbyModel.MapId" />
            <label for="mapId" class="authInputLabel">Map Id</label>
            <InputNumber class="authInputField" @bind-Value="createLobbyModel.MapId" placeholder="mapId" name="mapId" id="mapId"></InputNumber>
            <button class="authButton" type="submit">Create lobby</button>
        </EditForm>
    </div>
</div>

<div class="row">
    @if (currentLobby != null && currentLobby.LobbyName != null)
    {
        <div class="current-lobby-container">
            <h1>Current lobby: @currentLobby.LobbyName </h1>
            <button @onclick="LeaveLobby">LeaveLobby</button>
        </div>
    }
</div>

<div class="row">
    @if (currentLobby != null && currentLobby.LobbyName == null)
    {
        <div class="lobby-selector-container">
            <h1>Available lobbies:</h1>
            <select @onchange="JoinLobby">
                @if (loadedLobbies.Any())
                {
                    <option value="" selected disabled hidden>Choose lobby..</option>

                    @foreach (var lobby in loadedLobbies)
                    {
                        <option value="@lobby.Id">@lobby.LobbyName ( @lobby.CurrentPlayers / @lobby.Capacity )</option>
                    }
                }
            </select>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    CreateLobbyRequest createLobbyModel = new CreateLobbyRequest();
    private string playerId = string.Empty;

    string accessToken = string.Empty;
    private LobbyDTO currentLobby = null;
    private List<LobbyDTO> loadedLobbies = new List<LobbyDTO>();

    protected override async Task OnInitializedAsync()
    {
        playerId = authenticationState.Result.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
        accessToken = authenticationState.Result.User.FindFirst("AccesToken").Value;
        loadedLobbies = await lobbyService.GetAllLobbies(accessToken);
        currentLobby = await lobbyService.GetCurrentLobby(accessToken);
    }

    public async Task CreateLobby()
    {
        await lobbyService.CreateLobby(createLobbyModel, accessToken);
        this.StateHasChanged();
        navigationManager.NavigateTo("redirectToIndex");
        bool pooling = true;
        while (pooling)
        {
            Thread.Sleep(3000);
            var events = await this.gameService.GetUpdates();
            if (events.Any())
            {
                events.ForEach(x =>
                {
                    if (x.Action == "Start game")
                    {
                        navigationManager.NavigateTo("maingame/" + x.Parameter1);
                        pooling = false;
                    }
                });
            }
        }
    }

    public async Task JoinLobby(ChangeEventArgs e)
    {
        string lobbyId = e.Value.ToString();
        await lobbyService.JoinLobby(lobbyId, accessToken);
        this.StateHasChanged();
        navigationManager.NavigateTo("redirectToIndex");
        bool pooling = true;
        while (pooling)
        {
            var events = await this.gameService.GetUpdates();
            if (events.Any())
            {
                events.ForEach(x =>
                {
                    if (x.Action == "Start game")
                    {
                        navigationManager.NavigateTo("maingame/" + x.Parameter1);
                        pooling = false;
                    }
                });
            }
            Thread.Sleep(3000);
        }
    }

    public async Task LeaveLobby()
    {
        string lobbyId = this.currentLobby.Id.ToString();
        await lobbyService.LeaveLobby(lobbyId, accessToken);
        this.StateHasChanged();
        navigationManager.NavigateTo("redirectToIndex");
    }

    [Parameter]
    public CreateGameDTO createGameDTO { get; set; }
}
